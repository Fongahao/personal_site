version: "3"
services:

  admin: # 后台部署，使用Nginx静态部署
    build:
      context: ../admin
      dockerfile: ./docker/Dockerfile
    image: react_blog:admin
    ports:
      - 9001:80
    volumes:
      - ../admin/build:/www
      - ../admin/docker/nginx.conf:/etc/nginx/conf.d/nginx.conf
    container_name: react_blog_admin
    networks:
      - react_blog_net

  blog: # 前台博客部署
    build:
      context: ../blog
      dockerfile: ./docker/Dockerfile
    image: react_blog:blog
 #  depends_on:
 #    - "service"
 #  restart: on-failure
 #  ports:
 #    - 9000:9000
    networks:
      - react_blog_net
    container_name: react_blog_blog

  db: # 数据库，预先使用MySQL容器
    image: react_blog:mysql
    ports:
      - 33061:3306
    restart: on-failure
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_PASSWORD: 123456
      MYSQL_DATABASE: react_blog
    container_name: react_blog_mysql
    networks:
      - react_blog_net

  nginx: # 前台反向代理服务器
    build:
      context: ../blog
      dockerfile: ./docker/Dockerfile-nginx
    image: react_blog:nginx
    ports:
      - 9000:80
    volumes:
      - ../blog/docker/nginx.conf:/etc/nginx/conf.d/nginx.conf
    networks:
      - react_blog_net
    container_name: react_blog_nginx

  service: # 中台部署
    build:
      context: ../service
      dockerfile: ./docker/Dockerfile
    image: react_blog:service
    ports:
      - 9002:9002
    restart: on-failure
    container_name: react_blog_service
    #environment:
    #  MYSQL_HOST: 172.17.0.1
    #  MYSQL_USER: root
    #  MYSQL_PASSWORD: 8023
    #volumes:
    #  - ../service/article:/usr/src/app/article
    networks:
      - react_blog_net

networks:
  react_blog_net:
    external: true
